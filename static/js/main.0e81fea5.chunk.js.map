{"version":3,"sources":["components/MapEditor/store/MapStatus.ts","components/MapEditor/store/NewRegionStatus.ts","components/MapEditor/store/TransformStatus.ts","components/MapEditor/store/UploadInfoStatus.ts","components/MapEditor/store/OnlineListStatus.ts","components/MapEditor/store/ToolsStatus.ts","components/MapEditor/store/index.ts","components/MapEditor/mapContent.tsx","components/MapEditor/ToolMenu.tsx","components/MapEditor/MapBoard.tsx","components/MapEditor/actions/snapshot.ts","components/MapEditor/actions/move.ts","mapUtils.ts","components/MapEditor/actions/ajax.ts","components/MapEditor/actions/init.ts","components/MapEditor/actions/keyboard.ts","components/MapEditor/EditRegionDialog.tsx","components/MapEditor/utils.tsx","components/MapEditor/PushDialog.tsx","components/MapEditor/PullDialog.tsx","components/MapEditor/actions/export.tsx","components/MapEditor/Panel.tsx","components/MapEditor/MapNavigator.tsx","components/MapEditor/PaintTools.tsx","components/MapEditor/index.tsx","components/MapList/store.ts","components/MapList/actions.ts","components/MapList/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MapStatus","mapId","this","loaded","listenerRegistered","id","target","mapDataIndex","get","Error","currentRegionId","find","regions","reg","newParts","union","parts","Object","assign","push","snapshotGeneration","mapData","Map","p","set","partId","currentRegion","indexOf","regionId","filter","region","setCurrentRegion","r","snap","concat","map","name","description","observable","width","height","action","computed","NewRegionStatus","color","reset","mode","desc","TransformStatus","mapWidth","mapHeight","windowWidth","windowHeight","zoom","Math","max","centerX","centerY","ww","wh","x","y","l","abs","t","b","w","h","UploadInfoStatus","visible","title","author","OnlineListStatus","onlineList","loading","ToolsStatus","panelVisible","paintMode","contextMenu","type","mapStatus","newRegionStatus","transformStatus","uploadInfoStatus","onlineListStatus","toolsStatus","Background","props","background","path","transform","d","fill","undefined","stroke","strokeWidth","borderVisible","onClick","addPart","onMouseOver","evt","buttons","Component","RegionLayer","nextProps","generation","onMenu","getPartById","part","onContextMenu","pageX","pageY","preventDefault","MapContent","rest","RegionContextMenu","style","Item","ToolMenu","observer","menu","childStyle","position","left","top","zIndex","resetMenu","margin","backgroundColor","opacity","containerStyle","overflow","SvgBody","onWheel","deltaX","deltaY","altKey","setZoom","pow","setPos","viewBox","deletePart","Modal","confirm","content","onOk","setCurrentRegionById","showRegionMenu","MapBoard","useLayoutEffect","ele","document","querySelector","addEventListener","registerSnapshot","key","store","reaction","localStorage","JSON","stringify","exportSnapshot","saveSnapshot","loadSnapshot","data","parse","importSnapshot","zoomIn","zoomOut","move","dx","dy","rdx","rdy","mapIndexLoaders","a","default","mapDataLoaders","world","loadMapData","setMapId","setMapData","LOCAL_COMMIT_LIST_PREFIX","LOCAL_COMMIT_PREFIX","getLocalCommitList","appendLocalCommitList","newItem","mid","saveMapCommit","cid","Date","getTime","loadMapCommit","pushMap","notification","success","message","start","res","item","time","regionHash","finish","split","cidS","parseInt","Array","mergeRegions","error","SNAPSHOT_MAP_KEY","SNAPSHOT_TRANSFORM_KEY","SNAPSHOT_UPLOAD_KEY","dataMap","setSize","body","clientWidth","clientHeight","initStatus","registerListener","keyboardJS","bind","finishRegisteringListener","reg1","reg2","reg3","saveRegion","updateRegion","regionInfo","hide","onCancel","span","label","value","onChange","setName","setDescription","setColor","hex","ColorBlock","display","marginLeft","marginRight","validateStatus","defaultValue","setTitle","setAuthor","OnlineList","actions","okType","onConfirm","pullAndMerge","moment","format","okButtonProps","hidden","cancelButtonProps","bodyStyle","overflowY","renderCurrentMap","scale","xmlns","ReactDOMServer","renderToString","downloadText","filename","blob","Blob","downloadBlob","url","window","URL","createObjectURL","downloadDataUrl","dataUrl","createElement","href","download","click","exportCurrentMap","svg","innerHTML","appendChild","html2canvas","canvas","toDataURL","remove","BtnProps","ghost","block","RegionSelect","overlayStyle","maxHeight","placement","overlay","create","RegionTools","icon","edit","resetCurrentRegion","deleteRegion","Export","exportCurrentMapAsPng","Tools","show","showOnlineItems","borderColor","borderWidth","borderStyle","maxWidth","padding","MarginStyle","marginTop","marginBottom","PanelBody","textAlign","shape","size","border","hidePanel","PushDialog","PullDialog","EditRegionDialog","buttonStyle","PanelButton","showPanel","Panel","right","bottom","NaviBtn","MapNavigator","gutter","offset","PaintSwitchButtonProps","IconPairs","IconMap","setPaintMode","MapEditor","PaintTools","IndexComp","useEffect","initializeMap","match","params","then","c","mapListStatus","mapList","Promise","all","f","indices","setList","ListBody","idx","to","MapList","Index","loadMapList","App","locale","zhCN","className","exact","component","Boolean","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0e81fea5.chunk.js","sourcesContent":["import { MapStatusSnapshot } from '../../../types/snapshot';\nimport { action, observable, computed } from 'mobx';\nimport { RegionInfo } from '../../../types/region';\nimport { MapData, MapDataPart } from '../../../types/map';\nimport {find, union, concat} from 'lodash';\n\nclass MapStatus{\n    @observable mapId: string = \"\"\n    @observable loaded: boolean = false\n    @observable listenerRegistered: boolean = false\n    @observable mapData: MapData = {\n        width: 0,\n        height: 0,\n        parts: []\n    }\n    @observable mapDataIndex: Map<string, MapDataPart> = new Map()\n    @observable currentRegionId: string | null = null\n    @observable regions: RegionInfo[] = []\n    @observable snapshotGeneration: number = 0\n\n    @action setMapId(mapId: string){\n        this.mapId = mapId\n        this.loaded = false\n    }\n\n    @action finishRegisteringListener(){\n        this.listenerRegistered = true\n    }\n\n    getPartById(id: string){\n        const target = this.mapDataIndex.get(id)\n        if(!target){\n            throw new Error(`Invalid part id: ${id}`)\n        }\n        return target\n    }\n\n    @computed get currentRegion(): null | RegionInfo{\n        const id = this.currentRegionId\n        if(!id) return null\n        const target = find(this.regions, {id})\n        return target ? target : null\n    }\n\n    @action mergeRegions(regions: RegionInfo[]){\n        for(const reg of regions){\n            const target = find(this.regions, {id: reg.id})\n            if(target){\n                const newParts = union(target.parts, reg.parts)\n                Object.assign(target, {parts: newParts})\n            }else{\n                this.regions.push(reg)\n            }\n        }\n        this.snapshotGeneration ++\n    }\n\n    @action reset(){\n        this.currentRegionId = null\n        this.regions = []\n        this.snapshotGeneration++\n    }\n\n    @action setMapData(mapData: MapData){\n        this.mapData = mapData\n        this.mapDataIndex = new Map()\n        for(const p of mapData.parts){\n            this.mapDataIndex.set(p.id, p)\n        }\n        this.loaded = true\n    }\n    \n    @action addPart(partId: string){\n        const target = this.currentRegion\n        if(target !== null && target.parts.indexOf(partId) === -1){\n            target.parts = union(target.parts, [partId])\n        }\n        this.snapshotGeneration++\n    }\n\n    @action deletePart(id: string, regionId: string){\n        const target = find(this.regions, {id: regionId})\n        if(!target){\n            throw new Error(`No such region id: ${regionId}`)\n        }\n        if(regionId === this.currentRegionId){\n            target.parts = target.parts.filter(p => p !== id)\n        }\n        this.snapshotGeneration++\n    }\n\n    @action updateRegion(region: RegionInfo){\n        const target = find(this.regions, {id: region.id})\n        if(!!target){\n            Object.assign(target, region)\n            this.setCurrentRegion(target)\n        }else{\n            this.regions.push(region)\n            this.setCurrentRegion(region)\n        }\n        this.snapshotGeneration++\n    }\n\n    @action deleteRegion(regionId: string){\n        if(this.currentRegionId  === regionId){\n            this.currentRegionId = null\n        }\n        this.regions = this.regions.filter(r => r.id !== regionId)\n        this.snapshotGeneration++\n    }\n\n    @action setCurrentRegion(region: RegionInfo){\n        this.currentRegionId = region.id\n        this.snapshotGeneration++\n    }\n\n    @action setCurrentRegionById(id: string){\n        const target = find(this.regions, {id})\n        if(!target){\n            throw new Error(`Region id not found: ${id}`)\n        }\n        this.setCurrentRegion(target)\n        this.snapshotGeneration++\n    }\n\n    @action resetCurrentRegion(){\n        this.currentRegionId = null\n        this.snapshotGeneration++\n    }\n\n    @action importSnapshot(snap: MapStatusSnapshot){\n        this.regions = snap.regions\n        this.currentRegionId = snap.currentRegionId\n    }\n\n    exportSnapshot(): MapStatusSnapshot{\n        return {\n            regions: this.regions,\n            currentRegionId: this.currentRegionId\n        }\n    }\n\n    snapshotKey(){\n        return [\n            this.currentRegionId,\n            ...concat([], ...this.regions.map(reg => [\n                reg.id,\n                reg.name,\n                reg.description,\n                ...reg.parts\n            ]))\n        ]\n    }\n}\n\nexport default MapStatus","import { action, computed, observable } from 'mobx';\nimport { RegionInfo } from '../../../types/region';\nclass NewRegionStatus{\n    @observable id: string = \"\"\n    @observable name: string = \"\"\n    @observable description: string = \"\"\n    @observable color: string = \"#ff0000\"\n    @observable parts: string[] = []\n    @observable mode: \"disabled\" | \"edit\" | \"create\" = \"disabled\"\n\n    @computed get regionInfo(): RegionInfo {\n        return {\n            id: this.id,\n            name: this.name,\n            description: this.description,\n            color: this.color,\n            parts: this.parts\n        }\n    }\n\n    @action reset(){\n        this.id = \"\"\n        this.name = \"\"\n        this.description = \"\"\n        this.color = \"#ff0000\"\n        this.parts = []\n    }\n\n    @action hide(){\n        this.reset()\n        this.mode = 'disabled'\n    }\n\n    @action create(){\n        this.reset()\n        this.mode = 'create'\n    }\n\n    @action edit(region: RegionInfo){\n        this.id = region.id\n        this.name = region.name\n        this.description = region.description\n        this.color = region.color\n        this.parts = region.parts\n        this.mode = 'edit'\n    }\n\n    @action setName(name: string){\n        this.name = name\n        this.id = name\n        // if(this.mode === 'create'){\n        //     this.id = name\n        // }\n    }\n\n    @action setDescription(desc: string){\n        this.description = desc\n    }\n\n    @action setColor(color: string){\n        this.color = color\n    }\n}\n\nexport default NewRegionStatus","import { TransformStatusSnapshot } from '../../../types/snapshot';\nimport { action, computed, observable } from 'mobx';\nclass TransformStatus{\n    @observable zoom: number = 1\n    @observable centerX: number = 0\n    @observable centerY: number = 0\n    @observable mapWidth: number = 0\n    @observable mapHeight: number = 0\n    @observable windowWidth: number = 0\n    @observable windowHeight: number = 0\n    @observable snapshotGeneration: number = 0\n\n    @action setSize(\n        mapWidth: number, \n        mapHeight: number,\n        windowWidth: number, \n        windowHeight: number,\n    ){\n        this.mapWidth = mapWidth\n        this.mapHeight = mapHeight\n        this.windowWidth = windowWidth\n        this.windowHeight = windowHeight\n    }\n\n    @action initStatus(){\n        this.zoom = Math.max(\n            this.windowWidth / this.mapWidth,\n            this.windowHeight / this.mapHeight\n        )\n        this.centerX = this.mapWidth / 2\n        this.centerY = this.mapHeight / 2\n        this.snapshotGeneration ++\n    }\n\n    @action setZoom(zoom: number){\n        const minZoom = Math.max(\n            this.windowWidth / this.mapWidth,\n            this.windowHeight / this.mapHeight\n        )\n        if(zoom >= minZoom){\n            const ww = this.windowWidth / zoom\n            const wh = this.windowHeight / zoom\n            if(this.centerX < ww/2){\n                this.centerX = ww/2\n            }else if(this.centerX > this.mapWidth - ww/2){\n                this.centerX = this.mapWidth - ww/2\n            }\n            if(this.centerY < wh/2){\n                this.centerY = wh/2\n            }else if(this.centerY > this.mapHeight - wh/2){\n                this.centerY = this.mapHeight - wh/2\n            }\n            this.zoom = zoom\n            this.snapshotGeneration++\n        }\n    }\n    @action setPos(x: number, y: number){\n        const ww = this.windowWidth / this.zoom\n        const wh = this.windowHeight / this.zoom\n        if(x >= ww/2 && x + ww/2 <= this.mapWidth){\n            this.centerX = x\n        }else if(x !== this.centerX){\n            const l = ww/2\n            const r = this.mapWidth - ww/2\n            this.centerX = Math.abs(l - x) > Math.abs(r - x) ? r : l;\n        }\n        if(y >= wh/2 && y + wh/2 <= this.mapHeight){\n            this.centerY = y;\n        }else if(y !== this.centerY){\n            const t = wh/2\n            const b = this.mapHeight - wh/2\n            this.centerY = Math.abs(t - y) > Math.abs(b - y) ? b : t;\n        }\n        this.snapshotGeneration++\n    }\n\n    @computed get viewBox(){\n        const w = this.windowWidth / this.zoom\n        const h = this.windowHeight / this.zoom\n        const x = this.centerX - w/2\n        const y = this.centerY - h/2\n        return `${x} ${y} ${w} ${h}`\n    }\n\n    @action importSnapshot(snap: TransformStatusSnapshot){\n        this.zoom = snap.zoom\n        this.centerX = snap.centerX\n        this.centerY = snap.centerY\n    }\n\n    exportSnapshot(): TransformStatusSnapshot{\n        return {\n            centerX: this.centerX,\n            centerY: this.centerY,\n            zoom: this.zoom\n        }\n    }\n}\n\nexport default TransformStatus;","import { observable, action } from 'mobx';\nimport { AuthorInfoSnapshot } from '../../../types/snapshot';\nclass UploadInfoStatus{\n    @observable title: string = \"\"\n    @observable author: string = \"\"\n    @observable visible: boolean = false\n    @observable snapshotGeneration: number = 0\n\n    @action show(){\n        this.visible = true\n    }\n\n    @action hide(){\n        this.visible = false\n    }\n\n    @action setTitle(title: string){\n        this.title = title\n        this.snapshotGeneration ++\n    }\n\n    @action setAuthor(author: string){\n        this.author = author\n        this.snapshotGeneration ++\n    }\n\n    @action importSnapshot(snap: AuthorInfoSnapshot){\n        this.title = snap.title\n        this.author = snap.author\n        this.snapshotGeneration ++\n    }\n\n    exportSnapshot(): AuthorInfoSnapshot{\n        return {\n            author: this.author,\n            title: this.title\n        }\n    }\n}\n\nexport default UploadInfoStatus","import { observable, action } from 'mobx';\nimport { OnlineItemMeta } from '../../../types/snapshot';\nclass OnlineListStatus {\n    @observable onlineList: OnlineItemMeta[] = []\n    @observable loading: boolean = true\n    @observable visible: boolean = false\n    @action start(){\n        this.onlineList = []\n        this.loading = true\n        this.visible = true\n    }\n    @action finish(onlineList: OnlineItemMeta[]){\n        this.onlineList=onlineList\n        this.loading = false\n    }\n    @action hide(){\n        this.visible = false\n    }\n}\n\nexport default OnlineListStatus;","import { observable, action } from 'mobx';\nimport { RegionContextMenuStatus } from '../../../types/menu';\nexport type PaintToolMode = \"click\" | \"swipe\" | \"erase\"\n\nclass ToolsStatus {\n    @observable panelVisible = false\n    @observable paintMode: PaintToolMode = 'click'\n    @observable contextMenu: null | RegionContextMenuStatus = null\n\n    @action showPanel(){\n        this.panelVisible = true\n    }\n    @action hidePanel(){\n        this.panelVisible = false\n    }\n\n    @action setPaintMode(paintMode: PaintToolMode){\n        this.paintMode = paintMode\n    }\n\n    @action resetMenu(){\n        this.contextMenu = null\n    }\n\n    @action showRegionMenu(regionId: string, x: number, y: number){\n        this.contextMenu = {\n            type: 'region',\n            x, y, regionId\n        }\n    }\n}\n\nexport default ToolsStatus;","import MapStatus from './MapStatus';\nimport NewRegionStatus from './NewRegionStatus';\nimport TransformStatus from './TransformStatus';\nimport UploadInfoStatus from './UploadInfoStatus';\nimport OnlineListStatus from './OnlineListStatus';\nimport ToolsStatus from './ToolsStatus';\n\nexport const mapStatus = new MapStatus()\nexport const newRegionStatus = new NewRegionStatus()\nexport const transformStatus = new TransformStatus()\nexport const uploadInfoStatus = new UploadInfoStatus()\nexport const onlineListStatus = new OnlineListStatus()\nexport const toolsStatus = new ToolsStatus()","import React, { Component } from 'react';\nimport { MapDataPart } from '../../types/map';\nimport { RegionInfo } from '../../types/region';\nimport { mapStatus, toolsStatus } from './store';\n\n\ninterface BackgroundProps {\n    background: MapDataPart[]\n    borderVisible?: boolean\n}\n\nconst BorderWidth = 0.5\n\nexport class Background extends Component<BackgroundProps>{\n    shouldComponentUpdate(){\n        return false;\n    }\n    render(){\n        return (<g>\n            {this.props.background.map(({id, path, transform}) => (\n                <path \n                    d={path}\n                    key={id}\n                    id={id}\n                    fill=\"black\"\n                    transform={transform || undefined}\n                    stroke=\"white\"\n                    strokeWidth={this.props.borderVisible ? BorderWidth : 0}\n                    onClick={() => mapStatus.addPart(id)}\n                    onMouseOver={evt => {\n                        if(evt.buttons > 0 && toolsStatus.paintMode === 'swipe'){\n                            mapStatus.addPart(id)\n                        }\n                    }}\n                    />\n            ))}\n        </g>)\n    }\n}\n\ninterface RegionLayerProps {\n    regions: RegionInfo[]\n    generation: number\n    borderVisible?: boolean\n    getPartById: (id: string) => MapDataPart\n    onClick?: (partId: string, regionId: string) => void\n    onMouseOver?: (partId: string, regionId: string) => void\n    onMenu?: (x: number, y: number) => void\n}\n\nexport class RegionLayer extends Component<RegionLayerProps> {\n    shouldComponentUpdate(nextProps: RegionLayerProps): boolean{\n        return nextProps.generation === 0 || nextProps.generation !== this.props.generation\n    }\n    render(){\n        const {regions, onClick, onMouseOver, borderVisible, onMenu} = this.props\n        return (<g>\n            {regions.map(reg => (\n                <g key={reg.id}>\n                    {reg.parts.map(this.props.getPartById).map(part => (\n                        <path\n                            key={part.id}\n                            d={part.path}\n                            fill={reg.color}\n                            stroke=\"white\"\n                            transform={part.transform || undefined}\n                            strokeWidth={borderVisible ? BorderWidth : 0}\n                            onClick={evt => {\n                                if(onClick){\n                                    onClick(part.id, reg.id)\n                                }\n                            }}\n                            onContextMenu={evt => {\n                                if(onMenu){\n                                    onMenu(evt.pageX, evt.pageY)\n                                }\n                                evt.preventDefault()\n                            }}\n                            onMouseOver={evt => onMouseOver && evt.buttons>0 && onMouseOver(part.id, reg.id)}\n                        />\n                    ))}\n                </g>\n            ))}\n        </g>)\n    }\n}\n\ntype MapContentProps = BackgroundProps & RegionLayerProps\n\nexport const MapContent = ({background, borderVisible, ...rest}: MapContentProps) => (\n    <g>\n        <Background background={background} borderVisible={borderVisible}/>\n        <RegionLayer borderVisible={borderVisible} {...rest}/>\n    </g>\n)\n","import React, { CSSProperties } from 'react';\nimport {Menu} from 'antd';\nimport { observer } from 'mobx-react';\nimport { toolsStatus } from './store/index';\nimport { RegionContextMenuStatus } from '../../types/menu';\n\ninterface ContextMenuProps {\n    style: CSSProperties\n}\n\nexport const RegionContextMenu = ({regionId, x, y, style}: RegionContextMenuStatus & ContextMenuProps) => (\n    <Menu style={style}>\n        <Menu.Item>Test</Menu.Item>\n    </Menu>\n)\n\nexport const ToolMenu = observer(() => {\n    const menu = toolsStatus.contextMenu\n    if(!menu) return null;\n    const childStyle: CSSProperties = {\n        position: 'fixed',\n        left: menu.x,\n        top: menu.y,\n        zIndex: 101\n    }\n    return (\n        <div>\n            <div \n            onClick={() => toolsStatus.resetMenu()}\n            style={{\n                position: 'fixed',\n                left: 0, top: 0,\n                width: '100%', height: '100%',\n                margin: 0,\n                backgroundColor: \"black\",\n                opacity: 0.5,\n                zIndex: 100\n            }}/>\n            {menu.type !== 'region' ? null: <RegionContextMenu {...menu} style={childStyle}/>}\n        </div>\n    )\n})","import React, { CSSProperties, useLayoutEffect } from 'react';\nimport { observer } from 'mobx-react';\nimport { mapStatus, transformStatus, toolsStatus } from './store';\nimport { MapContent } from './mapContent';\nimport { Modal } from 'antd';\nimport { ToolMenu } from './ToolMenu';\n\n\nconst containerStyle: CSSProperties = {\n    width: '100%',\n    height: '100%',\n    margin: '0',\n    left: '0',\n    top: '0',\n    position: 'absolute',\n    overflow: 'hidden'\n}\n\n\nconst  SvgBody = observer(() => (\n    <svg \n        width=\"100%\" \n        height=\"100%\"\n        onWheel={({pageX, pageY, deltaX, deltaY, altKey}) => {\n            if(altKey){\n                // const dx = (document.body.clientWidth / 2 - pageX) / transformStatus.zoom\n                // const dy = (document.body.clientHeight / 2 - pageY) / transformStatus.zoom\n                transformStatus.setZoom(Math.pow(1.001, deltaY) * transformStatus.zoom)\n            }else{\n                transformStatus.setPos(\n                    transformStatus.centerX + deltaX / transformStatus.zoom,\n                    transformStatus.centerY + deltaY / transformStatus.zoom\n                )\n            }\n        }}\n        viewBox={transformStatus.viewBox}>\n        <MapContent\n            borderVisible\n            background={mapStatus.mapData.parts}\n            generation={mapStatus.snapshotGeneration}\n            regions={mapStatus.regions}\n            getPartById={id => mapStatus.getPartById(id)}\n            onClick={(partId, regionId) => {\n                if(regionId === mapStatus.currentRegionId){\n                    mapStatus.deletePart(partId, regionId)\n                }else{\n                    Modal.confirm({\n                        title: \"正在编辑其他地区\",\n                        content: \"是否切换到该地区?\",\n                        onOk: () => mapStatus.setCurrentRegionById(regionId)\n                    })\n                }\n            }}\n            onMouseOver={(partId, regionId) => {\n                if(toolsStatus.paintMode === \"erase\"){\n                    if(regionId === mapStatus.currentRegionId){\n                        mapStatus.deletePart(partId, regionId)\n                    }else{\n                        Modal.confirm({\n                            title: \"正在编辑其他地区\",\n                            content: \"是否切换到该地区?\",\n                            onOk: () => mapStatus.setCurrentRegionById(regionId)\n                        })\n                    }\n                }\n            }}\n            onMenu={(x, y) => {\n                mapStatus.currentRegionId && toolsStatus.showRegionMenu(mapStatus.currentRegionId, x, y)\n            }}\n        />\n    </svg>\n))\n\nconst MapBoard = () => {\n    useLayoutEffect(() => {\n        const ele = document.querySelector('#mapSvgBody')\n        if(ele){\n            ele.addEventListener('mousewheel', evt => {\n                evt.preventDefault()\n            })\n        }\n    })\n    return (\n        <div \n            id=\"mapSvgBody\"\n            style={containerStyle}\n        >\n            <SvgBody/>\n            <ToolMenu/>\n        </div>\n    )\n}\n\nexport default MapBoard","import { reaction } from 'mobx';\nimport { mapStatus } from '../store';\nexport interface Snapshotable<SnapShot> {\n    importSnapshot(snap: SnapShot): void\n    exportSnapshot(): SnapShot\n    snapshotGeneration: number\n}\n\nexport function registerSnapshot<SnapShot>(key: string, store: Snapshotable<SnapShot>){\n    return reaction(() => store.snapshotGeneration, () => {\n        saveSnapshot<SnapShot>(key, store)\n    })\n}\n\nexport function loadSnapshot<SnapShot>(key: string, store: Snapshotable<SnapShot>){\n    if(localStorage[key  + `.${mapStatus.mapId}`]){\n        const data = JSON.parse(localStorage[key  + `.${mapStatus.mapId}`]) as SnapShot\n        store.importSnapshot(data)\n        return true\n    }\n    return false\n}\n\nexport function saveSnapshot<SnapShot>(key: string, store: Snapshotable<SnapShot>){\n    localStorage[key + `.${mapStatus.mapId}`] = JSON.stringify(store.exportSnapshot())\n}\n","import { transformStatus } from '../store';\nconst ZoomStep = 2\nconst MoveStep = 100\n\nexport function zoomIn(){\n    transformStatus.setZoom(transformStatus.zoom * ZoomStep)\n}\n\nexport function zoomOut(){\n    transformStatus.setZoom(transformStatus.zoom / ZoomStep)\n}\n\nexport function move(dx: number, dy: number){\n    const rdx = MoveStep * dx / transformStatus.zoom\n    const rdy = MoveStep * dy / transformStatus.zoom\n    transformStatus.setPos(\n        transformStatus.centerX + rdx,\n        transformStatus.centerY + rdy\n    )\n}","import {MapData, MapMeta} from './types/map'\n\nexport const mapIndexLoaders: (() => Promise<MapMeta>)[] = [\n    async () => (await import('./maps/indices/0.json')).default\n]\n\nexport const mapDataLoaders: {[key: string]: () => Promise<MapData>} = {\n    world: async () => (await import('./maps/body/world.json')).default\n}\n","import { notification } from 'antd';\nimport { mapDataLoaders } from '../../../mapUtils';\nimport { OnlineItemMeta, UploadSnapshot } from '../../../types/snapshot';\nimport { mapStatus, onlineListStatus } from '../store';\n\nexport async function loadMapData(mapId: string){\n    mapStatus.setMapId(mapId)\n    const data = await mapDataLoaders[mapId]()\n    mapStatus.setMapData(data)\n    return data\n}\n\nexport interface CommitListItem {\n    mid: string\n    cid: number\n}\n\nconst LOCAL_COMMIT_LIST_PREFIX = 'ifworlds.map.local_commit_list.';\nconst LOCAL_COMMIT_PREFIX = 'ifworlds.map.data.';\n\nfunction getLocalCommitList(mapId: string): CommitListItem[] {\n    const data = localStorage[LOCAL_COMMIT_LIST_PREFIX + mapId]\n    return data ? JSON.parse(data) : []\n}\n\nfunction appendLocalCommitList(newItem: CommitListItem) {\n    const data = getLocalCommitList(newItem.mid)\n    data.push(newItem)\n    localStorage[LOCAL_COMMIT_LIST_PREFIX + newItem.mid] = JSON.stringify(data)\n}\n\nfunction saveMapCommit(mapId: string, snap: UploadSnapshot): CommitListItem {\n    const cid = new Date().getTime()\n    const mid = mapId\n    localStorage[`${LOCAL_COMMIT_PREFIX}${cid}.${mid}`] = JSON.stringify(snap)\n    return {cid, mid}\n}\n\nfunction loadMapCommit({cid, mid}: CommitListItem): UploadSnapshot{\n    const data = JSON.parse(localStorage[`${LOCAL_COMMIT_PREFIX}${cid}.${mid}`])\n    return data\n}\n\nexport async function pushMap(snap: UploadSnapshot){\n    const item = saveMapCommit(mapStatus.mapId, snap)\n    appendLocalCommitList(item)\n    notification.success({message: '已保存'})\n}\n\nexport async function showOnlineItems(){\n    onlineListStatus.start()\n    const res = getLocalCommitList(mapStatus.mapId).map(item => {\n        const snap = loadMapCommit(item)\n        const data: OnlineItemMeta = {\n            title: snap.title,\n            author: snap.author,\n            time: item.cid,\n            regionHash: `${item.mid}:${item.cid}`\n        }\n        return data\n    })\n    onlineListStatus.finish(res)\n}\n\nexport async function pullAndMerge(regionHash: string){\n    const [mid, cidS] = regionHash.split(\":\")\n    const cid = parseInt(cidS)\n    const res = loadMapCommit({cid, mid}).regions\n    if(res instanceof Array){\n        mapStatus.mergeRegions(res)\n        notification.success({\n            type: 'success',\n            message: '成功合并'\n        })\n    }else{\n        notification.error({message: \"未知错误\"})\n    }\n}","import { mapStatus, transformStatus, uploadInfoStatus } from '../store';\nimport { registerSnapshot, loadSnapshot } from './snapshot';\nimport { initializeKeyboardEvents } from './keyboard';\nimport { loadMapData } from './ajax';\n\nconst SNAPSHOT_MAP_KEY = '23earth.snapshot.map'\nconst SNAPSHOT_TRANSFORM_KEY = '23earth.snapshot.pos'\nconst SNAPSHOT_UPLOAD_KEY = '23earth.snapshot.upload'\n\nexport async function initializeMap(mapId: string){\n    const dataMap = await loadMapData(mapId)\n    loadSnapshot(SNAPSHOT_MAP_KEY, mapStatus)\n    transformStatus.setSize(\n        dataMap.width, dataMap.height, \n        document.body.clientWidth, document.body.clientHeight\n    )\n    if(!loadSnapshot(SNAPSHOT_TRANSFORM_KEY, transformStatus)){\n        transformStatus.initStatus()\n    }\n    loadSnapshot(SNAPSHOT_UPLOAD_KEY, uploadInfoStatus)\n    return registerListener()\n}\n\nexport function registerListener(){\n    if(!mapStatus.listenerRegistered){\n        initializeKeyboardEvents()\n        mapStatus.finishRegisteringListener()\n    }\n    const reg1 = registerSnapshot(SNAPSHOT_MAP_KEY, mapStatus)\n    const reg2 = registerSnapshot(SNAPSHOT_TRANSFORM_KEY, transformStatus)\n    const reg3 = registerSnapshot(SNAPSHOT_UPLOAD_KEY, uploadInfoStatus)\n    return () => {\n        reg1()\n        reg2()\n        reg3()\n    }\n}","import keyboardJS from 'keyboardjs';\nimport { move, zoomIn, zoomOut } from './move';\n\nexport function initializeKeyboardEvents(){\n    keyboardJS.bind('up', () => move(0, -1))\n    keyboardJS.bind('down', () => move(0, +1))\n    keyboardJS.bind('left', () => move(-1, 0))\n    keyboardJS.bind('right', () => move(1, 0))\n    keyboardJS.bind('w', () => move(0, -1))\n    keyboardJS.bind('s', () => move(0, +1))\n    keyboardJS.bind('a', () => move(-1, 0))\n    keyboardJS.bind('d', () => move(1, 0))\n\n    keyboardJS.bind('alt + up', zoomIn)\n    keyboardJS.bind('alt + down', zoomOut)\n    keyboardJS.bind('alt + w', zoomIn)\n    keyboardJS.bind('alt + s', zoomOut)\n}","import React from 'react';\nimport { Modal, Row, Col, Input } from 'antd';\nimport { newRegionStatus, mapStatus } from './store';\nimport FormItem from 'antd/lib/form/FormItem';\nimport TextArea from 'antd/lib/input/TextArea';\nimport {SwatchesPicker} from 'react-color';\nimport { observer } from 'mobx-react';\n\nfunction saveRegion(){\n    mapStatus.updateRegion(newRegionStatus.regionInfo)\n    newRegionStatus.hide()\n}\n\nexport default observer(() => (\n    <Modal\n        visible={newRegionStatus.mode !== 'disabled'}\n        onOk={saveRegion}\n        onCancel={() => newRegionStatus.hide()}>\n        <Row>\n            <Col span={24}>\n                <FormItem label=\"名称\">\n                    <Input value={newRegionStatus.name} onChange={evt => newRegionStatus.setName(evt.target.value)}/>\n                </FormItem>\n            </Col>\n            <Col span={24}>\n                <FormItem label=\"描述\">\n                    <TextArea value={newRegionStatus.description} onChange={evt => newRegionStatus.setDescription(evt.target.value)}/>\n                </FormItem>\n            </Col>\n            <Col span={24}>\n                <SwatchesPicker color={newRegionStatus.color} onChange={color => newRegionStatus.setColor(color.hex)} />\n            </Col>\n        </Row>\n    </Modal>\n))","import React from 'react';\n\n\nexport const ColorBlock = ({color}: {color: string}) => (\n    <div style={{\n        width: '0.8rem',\n        height: '0.8rem',\n        display: 'inline-block',\n        marginLeft: '0.2rem',\n        marginRight: '0.2rem',\n        backgroundColor: color\n    }}/>\n)","import React from 'react';\nimport {observer} from 'mobx-react'\nimport FormItem from 'antd/lib/form/FormItem';\nimport { Input, Modal } from 'antd';\nimport { uploadInfoStatus, mapStatus } from './store';\nimport { pushMap } from './actions/ajax';\n\nexport default observer(() => (\n    <Modal \n        visible={uploadInfoStatus.visible}\n        onCancel={() => uploadInfoStatus.hide()}\n        onOk={async () => {\n            await pushMap({\n                author: uploadInfoStatus.author,\n                title: uploadInfoStatus.title,\n                regions: mapStatus.regions\n            })\n            uploadInfoStatus.hide()\n        }}\n        >\n        <FormItem label=\"标题\" validateStatus={uploadInfoStatus.title ? \"success\": \"error\"}>\n            <Input defaultValue={uploadInfoStatus.title} onChange={evt => uploadInfoStatus.setTitle(evt.target.value)}/>\n        </FormItem>\n        <FormItem label=\"姓名\" validateStatus={uploadInfoStatus.author ? \"success\": \"error\"}>\n            <Input defaultValue={uploadInfoStatus.author} onChange={evt => uploadInfoStatus.setAuthor(evt.target.value)}/>\n        </FormItem>\n    </Modal>\n))","import React from 'react';\nimport { Modal, Spin, List, Button, Popconfirm } from 'antd';\nimport { onlineListStatus } from './store';\nimport { observer } from 'mobx-react-lite';\nimport moment from 'moment';\nimport { pullAndMerge } from './actions/ajax';\n\n\nconst OnlineList = observer(() => (\n    <List>\n        {onlineListStatus.onlineList.map(({title, author, time, regionHash}) => (\n            <List.Item \n                key={`${time}_${regionHash}`}\n                actions={[\n                    <Popconfirm title=\"将获取并合并所有地区信息，该操作无法撤销。\" okType=\"danger\" onConfirm={() => pullAndMerge(regionHash)}>\n                        <Button type=\"primary\">拉取并合并</Button>\n                    </Popconfirm>\n                ]}>\n                {title} ({author}) {moment(time).format('YYYY年MM月DD日 hh:mm:ss')}\n            </List.Item>\n        ))}\n    </List>\n))\n\nexport default observer(() => (\n    <Modal\n        visible={onlineListStatus.visible}\n        okButtonProps={{hidden: true}}\n        cancelButtonProps={{hidden: true}}\n        onCancel={() => onlineListStatus.hide()}\n        style={{\n            width: '80%',\n            height: '80%'\n        }}\n        bodyStyle={{\n            overflowY: 'auto'\n        }}\n    >\n        {onlineListStatus.loading ? <Spin/> : <OnlineList/>}\n    </Modal>\n))","import React from 'react';\nimport { mapStatus } from '../store';\nimport { MapContent } from '../mapContent';\nimport ReactDOMServer from 'react-dom/server';\nimport moment from 'moment'\nimport html2canvas from 'html2canvas'\n\nexport async function renderCurrentMap(scale: number = 1, borderVisible: boolean = false){\n    const map = (\n        <svg\n            width={mapStatus.mapData.width * scale}\n            height={mapStatus.mapData.height * scale}\n            viewBox={`0 0 ${mapStatus.mapData.width} ${mapStatus.mapData.height}`}\n            xmlns=\"http://www.w3.org/2000/svg\"\n        >\n            <MapContent\n                background={mapStatus.mapData.parts}\n                regions={mapStatus.regions}\n                generation={0}\n                borderVisible={borderVisible}\n                getPartById={id => mapStatus.getPartById(id)}\n            />\n        </svg>)\n        return ReactDOMServer.renderToString(map)\n}\n\nexport async function downloadText(type: string, content: string, filename: string){\n    const blob = new Blob([content], {type})\n    await downloadBlob(blob, filename)\n}\n\nexport async function downloadBlob(blob: Blob, filename: string){\n    const url = window.URL.createObjectURL(blob);\n    await downloadDataUrl(url, filename)\n    \n}\n\nexport async function downloadDataUrl(dataUrl: string, filename: string){\n    const a = document.createElement(\"a\");\n    a.href = dataUrl;\n    a.download = filename\n    a.click();\n}\n\nexport async function exportCurrentMap(){\n    const html = await renderCurrentMap()\n    downloadText(\"image/svg+xml\", html, `23earth_${moment().format(\"YYYY-MM-DD_hh:mm:ss\")}.svg`)\n}\n\nexport async function exportCurrentMapAsPng(height: number){\n    const scale = height / mapStatus.mapData.height\n    const svg = await renderCurrentMap(scale, false)\n    const ele = document.createElement(\"div\")\n    ele.innerHTML=svg\n    ele.style.left = `${document.body.clientWidth}px`\n    ele.style.top = `${document.body.clientHeight}px`\n    ele.style.width = `${mapStatus.mapData.width * scale}px`\n    ele.style.height = `${height}px`\n    ele.style.backgroundColor='white'\n    document.body.appendChild(ele)\n    const canvas = await html2canvas(ele)\n    const url = canvas.toDataURL('image/png')\n    ele.remove()\n    downloadDataUrl(url, `23earth_${moment().format(\"YYYY-MM-DD_hh:mm:ss\")}.png`)\n}","import React, { CSSProperties } from 'react';\nimport EditRegionDialog from './EditRegionDialog'\nimport { Button, Icon, Dropdown, Menu, Row, Col, Popconfirm } from 'antd';\nimport { newRegionStatus, mapStatus, uploadInfoStatus, transformStatus, toolsStatus } from './store';\nimport { observer } from 'mobx-react-lite';\nimport { ColorBlock } from './utils';\nimport { showOnlineItems } from './actions/ajax';\nimport PushDialog from './PushDialog';\nimport PullDialog from './PullDialog'\nimport { exportCurrentMap, exportCurrentMapAsPng } from './actions/export';\nimport ButtonGroup from 'antd/lib/button/button-group';\nimport { ButtonProps } from 'antd/lib/button';\n\nconst BtnProps: ButtonProps = {\n    ghost: false,\n    block: true\n}\n\nconst RegionSelect = observer(() => (\n    <Col span={24}>\n    <Dropdown \n        overlayStyle={{\n            maxHeight: '60vh',\n            overflowY: 'auto'\n        }}\n        placement=\"bottomLeft\" overlay={\n            <Menu>\n                {mapStatus.regions.map(r => (\n                    <Menu.Item \n                        key={r.id}\n                        onClick={() => mapStatus.setCurrentRegion(r)}\n                    >\n                        <ColorBlock color={r.color}/>\n                        {r.name}\n                    </Menu.Item>\n                ))}\n                <Menu.Item onClick={() => newRegionStatus.create()}>\n                    <Icon type=\"plus\"/>\n                    增加地区\n                </Menu.Item>\n            </Menu>\n        }>\n        <Button {...BtnProps}>\n            {\n                mapStatus.currentRegion ?\n                <span>\n                    <ColorBlock color={mapStatus.currentRegion.color}/>\n                    {mapStatus.currentRegion.name}\n                </span> :\n                \"未选择\"\n            }\n        </Button>\n    </Dropdown>\n    </Col>\n))\n\nconst RegionTools = observer(() => (\n    mapStatus.currentRegionId ? (<ButtonGroup style={{width: '100%'}}>\n        <Row>\n            <Col span={8}>\n                <Button\n                    {...BtnProps}\n                    icon=\"edit\"\n                    type=\"primary\"\n                    onClick={() => mapStatus.currentRegion && newRegionStatus.edit(mapStatus.currentRegion)}\n                    >编辑</Button>\n            </Col>\n            <Col span={8}>\n                <Button {...BtnProps} type=\"default\" icon=\"minus\" onClick={() => mapStatus.resetCurrentRegion()}>取消</Button>\n            </Col>\n            <Col span={8}>\n                <Popconfirm\n                    title=\"该地区的所有信息都会丢失, 且不可恢复, 确定要删除吗?\" \n                    okType=\"danger\" \n                    icon=\"delete\"\n                    onConfirm={() => mapStatus.currentRegionId && mapStatus.deleteRegion(mapStatus.currentRegionId)}>\n                    <Button {...BtnProps} type=\"danger\">删除</Button>\n                </Popconfirm>\n            </Col>\n        </Row>\n    </ButtonGroup>) : null\n))\n\nconst Export = () => (\n    <Dropdown overlay={\n        <Menu>\n            <Menu.Item onClick={exportCurrentMap}>SVG格式</Menu.Item>\n            <Menu.Item onClick={() => exportCurrentMapAsPng(1080)}>PNG格式(1080p)</Menu.Item>\n        </Menu>\n    }>\n        <Button {...BtnProps} icon=\"export\">导出</Button>\n    </Dropdown>\n)\n\nconst Tools = () => (\n    <ButtonGroup style={{width: '100%'}}>\n                    <Row>\n                        <Col span={6}>\n                            <Button {...BtnProps} icon=\"cloud-upload\" onClick={() => uploadInfoStatus.show()}>上传</Button>\n                        </Col>\n                        <Col span={6}>\n                            <Button {...BtnProps} icon=\"cloud-download\" onClick={() => showOnlineItems()}>拉取</Button>\n                        </Col>\n                        <Col span={6}>\n                            <Export/>\n                        </Col>\n                        <Col span={6}>\n                            <Popconfirm okType=\"danger\" title=\"将清空所有本地地图数据, 且无法恢复, 确定要清空吗?\" onConfirm={() => {\n                                mapStatus.reset()\n                                transformStatus.initStatus()\n                            }}>\n                                <Button {...BtnProps} type=\"danger\" icon=\"delete\">清空地图</Button>\n                            </Popconfirm>\n                        </Col>\n                    </Row>\n                </ButtonGroup>\n)\n\nconst bodyStyle: CSSProperties = {\n    position: 'fixed',\n    left: '0.5rem',\n    top: '0.5rem',\n    backgroundColor: 'white',\n    color: 'black',\n    borderColor: 'black',\n    borderWidth: '0.2rem',\n    borderStyle: 'dashed',\n    maxWidth: 'calc(100% - 1rem)',\n    padding: '0.5rem'\n}\n\nconst MarginStyle: CSSProperties = {\n    marginTop: '0.2rem',\n    marginBottom: '0.2rem'\n}\n\nconst PanelBody = observer(() => (\n    <div style={{...bodyStyle, display: toolsStatus.panelVisible ? 'block' : 'none'}}>\n        <Row>\n            <Col style={{textAlign: 'left'}}>\n                <Button shape=\"round\" icon=\"close\" size=\"large\" type=\"dashed\" style={{border: 'none'}} onClick={() => toolsStatus.hidePanel()}/>\n            </Col>\n        </Row>\n        <Row>\n            <Col span={24} style={MarginStyle}>\n                <Tools/>\n            </Col>\n            <Col span={24} style={MarginStyle}>\n                <RegionSelect/>\n            </Col>\n            <Col span={24} style={MarginStyle}>\n                <RegionTools/>\n            </Col>\n        </Row>\n\n        <PushDialog/>\n        <PullDialog/>\n        <EditRegionDialog/>\n    </div>\n))\n\nconst buttonStyle: CSSProperties = {\n    position: 'fixed',\n    top: '1rem',\n    left: '1rem',\n    backgroundColor: 'black',\n    color: 'white',\n    border: 'white 0.2rem solid'\n}\n\nconst PanelButton = observer(() => (\n    <Button \n        size=\"large\" \n        shape=\"round\"\n        icon=\"tool\"\n        style={{...buttonStyle, display: toolsStatus.panelVisible ? 'none' : 'block'}} \n        onClick={() => toolsStatus.showPanel()}\n        />\n))\n\nconst Panel = () => (\n    <div>\n        <PanelButton/>\n        <PanelBody/>\n    </div>\n)\n\nexport default Panel\n","import React, { CSSProperties } from 'react';\nimport { Row, Col, Button } from 'antd';\nimport { zoomOut, zoomIn, move } from './actions/move';\n\nconst style: CSSProperties = {\n    position: 'fixed',\n    right: '0.5rem',\n    bottom: '0.5rem',\n    width: '10rem'\n}\n\nconst NaviBtn = ({icon, onClick}: {icon: string, onClick: () => void}) => (\n    <Button shape=\"round\" size=\"large\" style={{backgroundColor: 'black', color: 'white', border: '0.2rem white solid'}} icon={icon} onClick={onClick}/>\n)\n\nconst RowGutter = 0\nconst BlockSize = 6\n\n//  U +\n// L R\n//  D -\nconst MapNavigator = () => (\n    <div style={style}>\n        <Row gutter={RowGutter}>\n            <Col span={BlockSize}><NaviBtn icon=\"plus\" onClick={zoomIn}/></Col>\n            <Col span={BlockSize} offset={BlockSize}><NaviBtn icon=\"up\" onClick={() => move(0, -1)}/></Col>\n        </Row>\n        <Row gutter={RowGutter}>\n            <Col span={BlockSize} offset={BlockSize}><NaviBtn icon=\"left\" onClick={() => move(-1, 0)}/></Col>\n            <Col span={BlockSize} offset={BlockSize}><NaviBtn icon=\"right\" onClick={() => move(+1, 0)}/></Col>\n        </Row>\n        <Row gutter={RowGutter}>\n            <Col span={BlockSize}><NaviBtn icon=\"minus\" onClick={zoomOut}/></Col>\n            <Col span={BlockSize} offset={BlockSize}><NaviBtn icon=\"down\" onClick={() => move(0, +1)}/></Col>\n        </Row>\n    </div>\n)\n\nexport default MapNavigator\n","import React from 'react';\nimport { Button, Dropdown, Menu, Icon } from 'antd';\nimport { observer } from 'mobx-react-lite';\nimport { toolsStatus } from './store';\nimport { ButtonProps } from 'antd/lib/button';\nimport { PaintToolMode } from './store/ToolsStatus';\n\n\nconst ClickIcon = 'edit'\nconst SwipeIcon = 'bg-colors'\nconst EraseIcon = 'scissor'\n\nconst PaintSwitchButtonProps: ButtonProps = {\n    size: 'large',\n    shape: 'round',\n    style: {\n        position: 'fixed',\n        left: '0.5rem',\n        bottom: '0.5rem',\n        border: 'white 0.2rem solid',\n        color: 'white',\n        backgroundColor: 'black'\n    }\n}\n\nconst IconPairs: [PaintToolMode, string, string][] = [\n    [\"click\", ClickIcon, \"点击添加\"],\n    [\"swipe\", SwipeIcon, \"滑动添加\"],\n    [\"erase\", EraseIcon, \"滑动删除\"]\n]\n\nconst IconMap = new Map(IconPairs.map(([mode, icon]) => [mode, icon]))\n\nexport default observer(() => (\n    <div>\n        <Dropdown placement=\"topLeft\" overlay={\n            <Menu>\n                {IconPairs.map(([mode, icon, title]) => (\n                    <Menu.Item key={mode} onClick={() => toolsStatus.setPaintMode(mode)}>\n                        <Icon type={icon}/>\n                        {title}\n                    </Menu.Item>\n                ))}\n            </Menu>\n        }>\n            <Button icon={IconMap.get(toolsStatus.paintMode)} {...PaintSwitchButtonProps}/>\n        </Dropdown>\n    </div>\n))","import React, { useEffect } from 'react';\nimport {Provider, observer} from 'mobx-react';\nimport { mapStatus, newRegionStatus, transformStatus, uploadInfoStatus, onlineListStatus, toolsStatus } from './store';\nimport MapBoard from './MapBoard'\nimport { initializeMap } from './actions/init';\nimport Panel from './Panel';\nimport MapNavigator from './MapNavigator';\nimport PaintTools from './PaintTools';\nimport { RouteComponentProps } from 'react-router';\n\nconst MapEditor = observer(() => (\n    mapStatus.loaded ?\n    (<div>\n        <MapBoard/>\n        <Panel/>\n        <MapNavigator/>\n        <PaintTools/>\n    </div>) : (\n        <h1>Loading...</h1>\n    )\n))\n\nconst IndexComp = (props: RouteComponentProps<{mapId: string}>) => {\n    useEffect(() => {\n        const reg = initializeMap(props.match.params.mapId)\n        return () => {reg.then(c => c())}\n    }, [props.match.params.mapId])\n    return (\n        <Provider \n            mapStatus={mapStatus}\n            newRegionStatus={newRegionStatus}\n            transformStatus={transformStatus}\n            uploadInfoStatus={uploadInfoStatus}\n            onlineListStatus={onlineListStatus}\n            toolsStatus={toolsStatus}>\n            <MapEditor/>\n        </Provider>\n    )\n}\n\nexport default IndexComp","import { observable, action } from 'mobx';\nimport { MapMeta } from '../../types/map';\nclass MapListStatus {\n    @observable loaded: boolean = false\n    @observable mapList: MapMeta[] = []\n\n    @action setList(mapList: MapMeta[]){\n        this.loaded = true\n        this.mapList = mapList\n    }\n}\n\nexport const mapListStatus = new MapListStatus()","import { mapIndexLoaders } from '../../mapUtils';\nimport { mapListStatus } from './store';\n\nexport async function loadMapList(){\n    const indices = await Promise.all(mapIndexLoaders.map(f => f()))\n    mapListStatus.setList(indices)\n}","import React, { useEffect } from 'react';\nimport { observer, Provider } from 'mobx-react';\nimport { mapListStatus } from './store';\nimport {Link} from 'react-router-dom'\nimport { Button, Row, Col } from 'antd';\nimport {loadMapList} from './actions'\n\n\nconst ListBody = observer(() => (\n    <div style={{margin: '5rem'}}>\n        <h1>地图编辑器</h1>\n        <Row>\n            {mapListStatus.mapList.map(({title, mapId}, idx) => (\n                <Col span={24} key={idx}>\n                    <Link to={`/map/${mapId}`}>\n                        <Button type=\"primary\" size=\"large\" block style={{backgroundColor: 'black', color: 'white', border: 'none'}}>{title}</Button>\n                    </Link>\n                </Col>\n            ))}\n        </Row>\n    </div>\n))\n\nconst MapList = observer(() => (\n    mapListStatus.loaded ? \n        <ListBody/> :\n        <h1>Loading...</h1>\n))\n\nconst Index = () => {\n    useEffect(() => {\n        loadMapList()\n    }, [])\n    return (\n        <Provider mapListStatus={mapListStatus}>\n            <MapList/>\n        </Provider>\n    )\n}\n\nexport default Index\n","import { ConfigProvider } from 'antd';\nimport 'antd/dist/antd.css';\nimport zhCN from 'antd/es/locale/zh_CN';\nimport React from 'react';\nimport { HashRouter, Route } from 'react-router-dom';\nimport './App.css';\nimport MapEditor from './components/MapEditor';\nimport MapList from './components/MapList';\n\nconst App: React.FC = () => {\n  return (\n    <ConfigProvider locale={zhCN}>\n      <div className=\"App\">\n        <HashRouter>\n          <Route path=\"/\" exact component={MapList}/>\n          <Route path=\"/map/:mapId\" component={MapEditor}/>\n        </HashRouter>\n      </div>\n    </ConfigProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}